<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Fri Jun 14 20:24:04 2024
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
App_OLED_Menu_screen &rArr; handle_node_level &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from interrupts_cw32f003.o(.text.ADC_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[e]">ATIM_IRQHandler</a> from interrupts_cw32f003.o(.text.ATIM_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[19]">AWT_IRQHandler</a> from interrupts_cw32f003.o(.text.AWT_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[21]">App_Data_Transfer_task</a> from app_data_transfer.o(.text.App_Data_Transfer_task) referenced from task.o(.data..L_MergedGlobals)
 <LI><a href="#[1f]">App_OLED_Menu_keys</a> from app_oled_menu.o(.text.App_OLED_Menu_keys) referenced from task.o(.data..L_MergedGlobals)
 <LI><a href="#[20]">App_OLED_Menu_screen</a> from app_oled_menu.o(.text.App_OLED_Menu_screen) referenced from task.o(.data..L_MergedGlobals)
 <LI><a href="#[22]">App_PID_Control_task</a> from app_pid_control.o(.text.App_PID_Control_task) referenced from task.o(.data..L_MergedGlobals)
 <LI><a href="#[12]">BTIM1_IRQHandler</a> from interrupts_cw32f003.o(.text.BTIM1_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[13]">BTIM2_IRQHandler</a> from interrupts_cw32f003.o(.text.BTIM2_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[14]">BTIM3_IRQHandler</a> from interrupts_cw32f003.o(.text.BTIM3_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[8]">FLASHRAM_IRQHandler</a> from interrupts_cw32f003.o(.text.FLASHRAM_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[a]">GPIOA_IRQHandler</a> from interrupts_cw32f003.o(.text.GPIOA_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[b]">GPIOB_IRQHandler</a> from interrupts_cw32f003.o(.text.GPIOB_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[c]">GPIOC_IRQHandler</a> from interrupts_cw32f003.o(.text.GPIOC_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[11]">GTIM_IRQHandler</a> from interrupts_cw32f003.o(.text.GTIM_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_cw32f003.o(.text.HardFault_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[15]">I2C_IRQHandler</a> from interrupts_cw32f003.o(.text.I2C_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from interrupts_cw32f003.o(.text.LVD_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from interrupts_cw32f003.o(.text.NMI_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from interrupts_cw32f003.o(.text.PendSV_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cw32f003.o(.text) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[16]">SPI_IRQHandler</a> from interrupts_cw32f003.o(.text.SPI_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from interrupts_cw32f003.o(.text.SVC_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[9]">SYSCTRL_IRQHandler</a> from interrupts_cw32f003.o(.text.SYSCTRL_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from cw32f003_systick.o(.text.SysTick_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1b]">SystemInit</a> from system_cw32f003.o(.text.SystemInit) referenced from startup_cw32f003.o(.text)
 <LI><a href="#[17]">UART1_IRQHandler</a> from interrupts_cw32f003.o(.text.UART1_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[18]">UART2_IRQHandler</a> from interrupts_cw32f003.o(.text.UART2_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[f]">VC1_IRQHandler</a> from interrupts_cw32f003.o(.text.VC1_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[10]">VC2_IRQHandler</a> from interrupts_cw32f003.o(.text.VC2_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from interrupts_cw32f003.o(.text.WDT_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cw32f003.o(.text)
 <LI><a href="#[1e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[1d]">fputc</a> from uart1.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1a]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[23]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[af]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_cw32f003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_task
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC12_on_changed
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_task
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_Transfer_task
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_fcmpge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_task
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_task
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_Transfer_task
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC12_on_changed
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Sysctrl_GetPClkFreq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSRC_Config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSequenceStepTimeouts
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMeasurementTimingBudget
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mean_Value_Filter
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTick
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_task
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b9]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[29]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[32]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[31]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[bc]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[42]"></a>ADC_Collector_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc_collector.o(.text.ADC_Collector_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Collector_get
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSqr1Result
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSqr0Result
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_btim2_callback
</UL>

<P><STRONG><a name="[43]"></a>ADC_GetSqr0Result</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f003_adc.o(.text.ADC_GetSqr0Result))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Collector_get
</UL>

<P><STRONG><a name="[44]"></a>ADC_GetSqr1Result</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f003_adc.o(.text.ADC_GetSqr1Result))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Collector_get
</UL>

<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ATIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.ATIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>AWT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.AWT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>App_Data_Transfer_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_data_transfer.o(.text.App_Data_Transfer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = App_Data_Transfer_init &rArr; Bluetooth_init &rArr; USART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>App_Data_Transfer_task</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, app_data_transfer.o(.text.App_Data_Transfer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = App_Data_Transfer_task &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_send_string
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[4a]"></a>App_OLED_Menu_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_oled_menu.o(.text.App_OLED_Menu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = App_OLED_Menu_init &rArr; OLED_Init &rArr; OLED_Refresh &rArr; I2C_write &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC12_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>App_OLED_Menu_keys</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_oled_menu.o(.text.App_OLED_Menu_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_OLED_Menu_keys &rArr; Keys_scan &rArr; Keys_on_key_down &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keys_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[20]"></a>App_OLED_Menu_screen</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, app_oled_menu.o(.text.App_OLED_Menu_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = App_OLED_Menu_screen &rArr; handle_node_level &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[53]"></a>App_PID_Control_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_pid_control.o(.text.App_PID_Control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = App_PID_Control_init &rArr; VL53L0X_init &rArr; setMeasurementTimingBudget &rArr; getSequenceStepTimeouts &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startContinuous
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>App_PID_Control_task</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, app_pid_control.o(.text.App_PID_Control_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = App_PID_Control_task &rArr; readRangeContinuousMillimeters &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRangeContinuousMillimeters
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mean_Value_Filter
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[12]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, interrupts_cw32f003.o(.text.BTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BTIM1_IRQHandler &rArr; on_btim1_callback &rArr; Task_switch_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_btim1_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, interrupts_cw32f003.o(.text.BTIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTIM2_IRQHandler &rArr; on_btim2_callback &rArr; ADC_Collector_get
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_btim2_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BTIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.BTIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>BTIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f003_btim.o(.text.BTIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>BTIM_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cw32f003_btim.o(.text.BTIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>Bluetooth_init</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, bluetooth.o(.text.Bluetooth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Bluetooth_init &rArr; USART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APBPeriphClk_Enable1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClk_Enable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Sysctrl_GetPClkFreq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_Transfer_init
</UL>

<P><STRONG><a name="[49]"></a>Bluetooth_send_string</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bluetooth.o(.text.Bluetooth_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bluetooth_send_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_Transfer_task
</UL>

<P><STRONG><a name="[4c]"></a>EC12_init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ec12.o(.text.EC12_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EC12_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigFilter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_init
</UL>

<P><STRONG><a name="[6c]"></a>EC12_on_changed</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, app_oled_menu.o(.text.EC12_on_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EC12_on_changed &rArr; Servo_set_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_get_angle
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_IRQHandleCallback
</UL>

<P><STRONG><a name="[8]"></a>FLASHRAM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.FLASHRAM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>FLASH_SetLatency</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_flash.o(.text.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>FirmwareDelay</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, system_cw32f003.o(.text.FirmwareDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FirmwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[a]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOB_IRQHandleCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ec12.o(.text.GPIOB_IRQHandleCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GPIOB_IRQHandleCallback &rArr; EC12_on_changed &rArr; Servo_set_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC12_on_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_cw32f003.o(.text.GPIOB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GPIOB_IRQHandler &rArr; GPIOB_IRQHandleCallback &rArr; EC12_on_changed &rArr; Servo_set_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_IRQHandleCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.GPIOC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO_ConfigFilter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32f003_gpio.o(.text.GPIO_ConfigFilter))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC12_init
</UL>

<P><STRONG><a name="[65]"></a>GPIO_Init</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, cw32f003_gpio.o(.text.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC12_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keys_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_init
</UL>

<P><STRONG><a name="[75]"></a>GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cw32f003_gpio.o(.text.GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keys_scan
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ack
</UL>

<P><STRONG><a name="[71]"></a>GPIO_WritePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f003_gpio.o(.text.GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[84]"></a>GTIM_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f003_gtim.o(.text.GTIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_init
</UL>

<P><STRONG><a name="[11]"></a>GTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.GTIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>GTIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_gtim.o(.text.GTIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_init
</UL>

<P><STRONG><a name="[81]"></a>GTIM_OCInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_gtim.o(.text.GTIM_OCInit))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_init
</UL>

<P><STRONG><a name="[82]"></a>GTIM_SetCompare3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f003_gtim.o(.text.GTIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_set_angle
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_init
</UL>

<P><STRONG><a name="[80]"></a>GTIM_TimeBaseInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cw32f003_gtim.o(.text.GTIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_init
</UL>

<P><STRONG><a name="[87]"></a>GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f003_systick.o(.text.GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRangeContinuousMillimeters
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performSingleRefCalibration
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpadInfo
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.I2C_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C_init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, i2c.o(.text.I2C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>I2C_read</STRONG> (Thumb, 896 bytes, Stack size 80 bytes, i2c.o(.text.I2C_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareDelay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRangeContinuousMillimeters
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startContinuous
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSequenceStepTimeouts
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performSingleRefCalibration
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMeasurementTimingBudget
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMeasurementTimingBudget
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpadInfo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_init
</UL>

<P><STRONG><a name="[76]"></a>I2C_write</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, i2c.o(.text.I2C_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C_write &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareDelay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRangeContinuousMillimeters
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startContinuous
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performSingleRefCalibration
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMeasurementTimingBudget
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpadInfo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_init
</UL>

<P><STRONG><a name="[77]"></a>InitTick</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cw32f003_systick.o(.text.InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>Keys_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, keys.o(.text.Keys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keys_init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_init
</UL>

<P><STRONG><a name="[79]"></a>Keys_on_key_down</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, app_oled_menu.o(.text.Keys_on_key_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Keys_on_key_down &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keys_scan
</UL>

<P><STRONG><a name="[7a]"></a>Keys_on_key_up</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_oled_menu.o(.text.Keys_on_key_up))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keys_scan
</UL>

<P><STRONG><a name="[4e]"></a>Keys_scan</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, keys.o(.text.Keys_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Keys_scan &rArr; Keys_on_key_down &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keys_on_key_down
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keys_on_key_up
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_keys
</UL>

<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>Mean_Value_Filter</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tools.o(.text.Mean_Value_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mean_Value_Filter &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_task
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OLED_Clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oled.o(.text.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh &rArr; I2C_write &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_screen
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[96]"></a>OLED_DrawLine</STRONG> (Thumb, 320 bytes, Stack size 44 bytes, oled.o(.text.OLED_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OLED_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[4d]"></a>OLED_Init</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, oled.o(.text.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = OLED_Init &rArr; OLED_Refresh &rArr; I2C_write &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareDelay
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_init
</UL>

<P><STRONG><a name="[52]"></a>OLED_Refresh</STRONG> (Thumb, 532 bytes, Stack size 64 bytes, oled.o(.text.OLED_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OLED_Refresh &rArr; I2C_write &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_screen
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[7c]"></a>OLED_ShowChar</STRONG> (Thumb, 960 bytes, Stack size 120 bytes, oled.o(.text.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[51]"></a>OLED_ShowString</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, oled.o(.text.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_screen
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[7d]"></a>On_SysTick_Update</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text.On_SysTick_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = On_SysTick_Update &rArr; Task_switch_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_switch_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>RCC_AHBPeriphClk_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_rcc.o(.text.RCC_AHBPeriphClk_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_init
</UL>

<P><STRONG><a name="[66]"></a>RCC_APBPeriphClk_Enable1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_rcc.o(.text.RCC_APBPeriphClk_Enable1))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_init
</UL>

<P><STRONG><a name="[8c]"></a>RCC_APBPeriphClk_Enable2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_rcc.o(.text.RCC_APBPeriphClk_Enable2))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_init
</UL>

<P><STRONG><a name="[99]"></a>RCC_HCLKPRS_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_rcc.o(.text.RCC_HCLKPRS_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>RCC_HSI_Enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cw32f003_rcc.o(.text.RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>RCC_PCLKPRS_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_rcc.o(.text.RCC_PCLKPRS_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>RCC_SYSCLKSRC_Config</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cw32f003_rcc.o(.text.RCC_SYSCLKSRC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SYSCLKSRC_Config &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>RCC_Sysctrl_GetPClkFreq</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cw32f003_rcc.o(.text.RCC_Sysctrl_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_Sysctrl_GetPClkFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_init
</UL>

<P><STRONG><a name="[16]"></a>SPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.SPI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SYSCTRL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.SYSCTRL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Servo_get_angle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, servo.o(.text.Servo_get_angle))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC12_on_changed
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[54]"></a>Servo_init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, servo.o(.text.Servo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Servo_init &rArr; GTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_ITConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare3
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_Cmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OCInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_init
</UL>

<P><STRONG><a name="[5f]"></a>Servo_set_angle</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, servo.o(.text.Servo_set_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Servo_set_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare3
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_task
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC12_on_changed
</UL>

<P><STRONG><a name="[56]"></a>SysTickDelay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cw32f003_systick.o(.text.SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_init
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cw32f003_systick.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Handler &rArr; On_SysTick_Update &rArr; Task_switch_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_SysTick_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SystemInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, system_cw32f003.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>Task_exec_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, task.o(.text.Task_exec_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task_exec_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>Task_switch_handler</STRONG> (Thumb, 284 bytes, Stack size 20 bytes, task.o(.text.Task_switch_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Task_switch_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_btim1_callback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;On_SysTick_Update
</UL>

<P><STRONG><a name="[17]"></a>UART1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, interrupts_cw32f003.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData_8bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData_8bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>UART1_init</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, uart1.o(.text.UART1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART1_init &rArr; USART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APBPeriphClk_Enable2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClk_Enable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f003_uart.o(.text.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cw32f003_uart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_send_string
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[88]"></a>USART_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cw32f003_uart.o(.text.USART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>USART_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_uart.o(.text.USART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_init
</UL>

<P><STRONG><a name="[68]"></a>USART_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, cw32f003_uart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_init
</UL>

<P><STRONG><a name="[89]"></a>USART_ReceiveData_8bit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32f003_uart.o(.text.USART_ReceiveData_8bit))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>USART_SendData_8bit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cw32f003_uart.o(.text.USART_SendData_8bit))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_send_string
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f]"></a>VC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.VC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>VC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.VC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>VL53L0X_init</STRONG> (Thumb, 988 bytes, Stack size 64 bytes, vl53l0x.o(.text.VL53L0X_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = VL53L0X_init &rArr; setMeasurementTimingBudget &rArr; getSequenceStepTimeouts &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performSingleRefCalibration
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMeasurementTimingBudget
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMeasurementTimingBudget
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpadInfo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_init
</UL>

<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(.text.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart1.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[90]"></a>getMeasurementTimingBudget</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, vl53l0x.o(.text.getMeasurementTimingBudget))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = getMeasurementTimingBudget &rArr; getSequenceStepTimeouts &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSequenceStepTimeouts
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_init
</UL>

<P><STRONG><a name="[93]"></a>getSequenceStepTimeouts</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, vl53l0x.o(.text.getSequenceStepTimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = getSequenceStepTimeouts &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMeasurementTimingBudget
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMeasurementTimingBudget
</UL>

<P><STRONG><a name="[8f]"></a>getSpadInfo</STRONG> (Thumb, 444 bytes, Stack size 48 bytes, vl53l0x.o(.text.getSpadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = getSpadInfo &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_init
</UL>

<P><STRONG><a name="[4f]"></a>handle_node_level</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, app_oled_menu.o(.text.handle_node_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = handle_node_level &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawLine
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_get_angle
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_screen
</UL>

<P><STRONG><a name="[1a]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = main &rArr; App_PID_Control_init &rArr; VL53L0X_init &rArr; setMeasurementTimingBudget &rArr; getSequenceStepTimeouts &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSI_Enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSRC_Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLKPRS_Config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKPRS_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_exec_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_Transfer_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[62]"></a>on_btim1_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task_timer.o(.text.on_btim1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = on_btim1_callback &rArr; Task_switch_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_switch_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>on_btim2_callback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_adc.o(.text.on_btim2_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_btim2_callback &rArr; ADC_Collector_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Collector_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>performSingleRefCalibration</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, vl53l0x.o(.text.performSingleRefCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = performSingleRefCalibration &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_init
</UL>

<P><STRONG><a name="[59]"></a>readRangeContinuousMillimeters</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, vl53l0x.o(.text.readRangeContinuousMillimeters))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = readRangeContinuousMillimeters &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_task
</UL>

<P><STRONG><a name="[91]"></a>setMeasurementTimingBudget</STRONG> (Thumb, 316 bytes, Stack size 80 bytes, vl53l0x.o(.text.setMeasurementTimingBudget))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = setMeasurementTimingBudget &rArr; getSequenceStepTimeouts &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSequenceStepTimeouts
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_init
</UL>

<P><STRONG><a name="[58]"></a>startContinuous</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, vl53l0x.o(.text.startContinuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = startContinuous &rArr; I2C_read &rArr; send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_init
</UL>

<P><STRONG><a name="[9c]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bd]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[5c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_task
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC12_on_changed
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keys_on_key_down
</UL>

<P><STRONG><a name="[be]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bf]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9e]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c0]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[48]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_Transfer_task
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OLED_Menu_screen
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[c1]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c2]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3c]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a0]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rred.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[a5]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[9f]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 838 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[a2]"></a>__kernel_cos</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[a3]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[a4]"></a>__kernel_sin</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[a7]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[a8]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[a6]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[c3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ad]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[94]"></a>cos</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>

<P><STRONG><a name="[57]"></a>puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PID_Control_init
</UL>

<P><STRONG><a name="[95]"></a>sin</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_node_level
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>send</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, i2c.o(.text.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = send &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
</UL>

<P><STRONG><a name="[74]"></a>wait_ack</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, i2c.o(.text.wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wait_ack &rArr; FirmwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
</UL>

<P><STRONG><a name="[a9]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9d]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[ac]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ab]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
